##
# Copyright (C) 2022 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##
name: "ZComponent: Build Release Artifact"
on:
  workflow_call:
    inputs:
      # Valid version policies are as follows: specified, branch-commit, adhoc-commit
      version-policy:
        description: "Version Policy:"
        type: string
        required: true
      # Valid options are none, integration, and preview
      trigger-env-deploy:
        description: "Deploy to Environment:"
        type: string
        required: true
        default: "none"
      new-version:
        description: "New Version:"
        type: string
        required: false
      dry-run-enabled:
        description: "Perform Dry Run"
        type: boolean
        required: false
        default: false
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "17.0.3"
      gradle-version:
        description: "Gradle Version:"
        type: string
        required: false
        default: "wrapper"
      custom-job-label:
        description: "Custom Job Label:"
        type: string
        required: false
        default: "Artifact"

    secrets:
      access-token:
        required: true
      bucket-name:
        required: true
      jenkins-integration-url:
        required: true
      jenkins-preview-url:
        required: true

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  contents: read

jobs:
  Artifact:
    name: ${{ inputs.custom-job-label || 'Artifact' }}
    runs-on: [self-hosted, Linux, services, standard, ephemeral]
    steps:
      - name: Install Semantic Version Tools
        run: |
          echo "::group::Download SemVer Binary"
          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          echo "::endgroup::"
          echo "::group::Change SemVer Binary Permissions"
          sudo chmod -v +x /usr/local/bin/semver
          echo "::endgroup::"
          echo "::group::Show SemVer Binary Version Info"
          semver --version
          echo "::endgroup::"

      - name: Install Deterministic Zip Tooling
        run: |
          echo "::group::Download Binary"
          sudo curl -L -o /usr/local/bin/deterministic-zip https://github.com/timo-reymann/deterministic-zip/releases/download/1.2.0/deterministic-zip_linux-amd64
          echo "::endgroup::"
          echo "::group::Change Binary Permissions"
          sudo chmod -v +x /usr/local/bin/deterministic-zip
          echo "::endgroup::"
          echo "::group::Show Binary Version Info"
          deterministic-zip --version
          echo "::endgroup::"

      - name: Install JSON Tools
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            echo "::group::Setup JQ Command"
            sudo apt update
            sudo apt install -y jq
            echo "::endgroup::"
          fi

          JQ_VERSION="$(jq --version)"
          if [[ "${JQ_VERSION}" != "jq-1.6" ]]; then
            echo "::group::Updating JQ Version"
            sudo apt update
            sudo apt upgrade -y jq
            echo "::endgroup::"
          fi

          if ! command -v tee >/dev/null 2>&1; then
            echo "::group::Setup Tee Command"
            sudo apt update
            sudo apt install -y coreutils
            echo "::endgroup::"
          fi

          echo "::group::Show JQ Version"
          jq --version
          echo "::endgroup::"

      - name: Verify Workflow Parameters
        id: parameters
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME="${BRANCH_NAME##origin/}"
          BRANCH_NAME_LOWER="$(echo "${BRANCH_NAME}" | tr '[:upper:]' '[:lower:]')"
          BRANCH_NAME_SAFE="$(echo "${BRANCH_NAME_LOWER}" | tr '/' '-' | tr '_' '.')"

          COMMIT_PREFIX="adhoc"
          [[ "${{ inputs.version-policy }}" == "branch-commit" ]] && COMMIT_PREFIX="${BRANCH_NAME_SAFE}"

          echo "::set-output name=branch-name::${BRANCH_NAME}"
          echo "::set-output name=branch-name-lower::${BRANCH_NAME_LOWER}"
          echo "::set-output name=branch-name-safe::${BRANCH_NAME_SAFE}"
          echo "::set-output name=commit-prefix::${COMMIT_PREFIX}"
          echo "::set-output name=commit-id::${{ github.sha }}"
          echo "::set-output name=commit-id-short::$(echo "${{ github.sha }}" | cut -c1-8)"

      - name: Verify Version Update (As Specified)
        if: ${{ inputs.version-policy == 'specified' && !cancelled() && !failure() }}
        run: |
          VALID_VERSION="$(semver validate "${{ inputs.new-version }}")"

          if [[ "${VALID_VERSION}" != "valid" ]]; then
            echo "::error title=Version Error::The supplied new-version parameter (${{ inputs.new-version }}) is invalid and does not conform to the semantic versioning specifications."
            exit 2
          fi

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "hedera-artifact-builds@devops-1-254919.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          gradle-home-cache-includes: |
            caches
            notifications
            jdks

      - name: Gradle Update Version (As Specified)
        uses: gradle/gradle-build-action@v2
        if: ${{ inputs.version-policy == 'specified' && !cancelled() && !failure() }}
        with:
          arguments: versionAsSpecified -PnewVersion=${{ inputs.new-version }} --scan

      - name: Gradle Update Version (Branch Commit)
        uses: gradle/gradle-build-action@v2
        if: ${{ inputs.version-policy != 'specified' && !cancelled() && !failure() }}
        with:
          arguments: versionAsPrefixedCommit -PcommitPrefix=${{ steps.parameters.outputs.commit-prefix }} --scan

      - name: Gradle Version Summary
        uses: gradle/gradle-build-action@v2
        with:
          arguments: githubVersionSummary --scan

      - name: Gradle Assemble
        id: gradle-build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assemble --scan

      - name: Compute Final Effective Version
        id: effective-version
        run: |
          EFF_VERSION="$(./gradlew :hedera-node:showVersion --quiet | tr -d '[:space:]')"
          echo "::set-output name=number::${EFF_VERSION}"

      - name: Stage Artifact Build Folder
        id: artifact-staging
        run: |
          BUILD_BASE_DIR="${HOME}/artifact-build"
          mkdir -p "${BUILD_BASE_DIR}/data/lib"
          mkdir -p "${BUILD_BASE_DIR}/data/apps"

          cp -f hedera-node/data/lib/*.jar "${BUILD_BASE_DIR}/data/lib"
          cp -f hedera-node/data/apps/*.jar "${BUILD_BASE_DIR}/data/apps"
          cp -f hedera-node/configuration/update/immediate.sh "${BUILD_BASE_DIR}"
          cp -f hedera-node/configuration/update/during-freeze.sh "${BUILD_BASE_DIR}"

          echo "::set-output name=folder::${BUILD_BASE_DIR}"

      - name: Write Artifact Version Descriptor
        working-directory: ${{ steps.artifact-staging.outputs.folder }}
        run: |
          printf "VERSION=%s\nCOMMIT=%s\nDATE=%s" "${{ steps.effective-version.outputs.number }}" "${{ steps.parameters.outputs.commit-id-short }}" "$(date -u)" \
            | tee VERSION

      - name: Create Artifact Archive
        id: artifact-release
        working-directory: ${{ steps.artifact-staging.outputs.folder }}
        run: |
          POLICY="${{ inputs.version-policy }}"
          ARTIFACT_BASE_DIR="${HOME}/artifact-release"
          mkdir -p "${ARTIFACT_BASE_DIR}"

          if [[ "${POLICY}" == "branch-commit"  ]]; then
            ARTIFACT_NAME="build-${{ steps.parameters.outputs.branch-name-lower }}-${{ steps.parameters.outputs.commit-id-short }}"
          else
            ARTIFACT_NAME="build-v${{ steps.effective-version.outputs.number }}" 
          fi

          ARTIFACT_FILE="${ARTIFACT_BASE_DIR}/${ARTIFACT_NAME}.zip"
          deterministic-zip -D -vr "${ARTIFACT_FILE}" *

          echo "::set-output name=folder::${ARTIFACT_BASE_DIR}"
          echo "::set-output name=name::${ARTIFACT_NAME}"
          echo "::set-output name=file::${ARTIFACT_FILE}"

      - name: Compute SHA Hash
        working-directory: ${{ steps.artifact-release.outputs.folder }}
        run: |
          ARTIFACT_NAME="${{ steps.artifact-release.outputs.name }}"
          sha384sum "${ARTIFACT_NAME}.zip" | tee "${ARTIFACT_NAME}.sha384"

      - name: Upload Artifacts (DevOps GCP Bucket)
        uses: google-github-actions/upload-cloud-storage@v0.10.2
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          path: ${{ steps.artifact-release.outputs.folder }}
          destination: ${{ secrets.bucket-name }}
          parent: false

      - name: Notify Jenkins of Release (Integration)
        uses: fjogeleit/http-request-action@v1.10.0
        if: ${{ inputs.dry-run-enabled != true && inputs.trigger-env-deploy == 'integration' && !cancelled() && !failure() }}
        with:
          url: ${{ secrets.jenkins-integration-url }}
          data: ${{ toJSON(github.event) }}

      - name: Notify Jenkins of Release (Preview)
        uses: fjogeleit/http-request-action@v1.10.0
        if: ${{ inputs.dry-run-enabled != true && inputs.trigger-env-deploy == 'preview' && !cancelled() && !failure() }}
        with:
          url: ${{ secrets.jenkins-preview-url }}
          data: ${{ toJSON(github.event) }}
